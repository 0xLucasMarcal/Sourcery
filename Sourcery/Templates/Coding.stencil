import Foundation


extension NSCoder {

    @nonobjc func decode(forKey: String) -> String? {
        return self.decode(forKey: forKey) as String?
    }

    @nonobjc func decode(forKey: String) -> TypeName? {
        return self.decode(forKey: forKey) as TypeName?
    }

    @nonobjc func decode(forKey: String) -> AccessLevel? {
        return self.decode(forKey: forKey) as AccessLevel?
    }

    @nonobjc func decode(forKey: String) -> Bool {
        return self.decodeBool(forKey: forKey)
    }

    @nonobjc func decode(forKey: String) -> Int {
        return self.decodeInteger(forKey: forKey)
    }

    func decode<E>(forKey: String) -> E? {
        guard let object = self.decodeObject(forKey: forKey) else {
            return nil
        }

        return object as? E
    }

}

{% for type in types.implementing.AutoDiffable %}
/*
extension {{ type.name }}{% if not type.supertype.implements.AutoDiffable %}: NSCoding{% endif %} {
        // {{ type.name }}.NSCoding {
        required init?(coder aDecoder: NSCoder) {
            {% for variable in type.storedVariables %}{% if not variable.annotations.skipEquality %}{% if not variable.typeName.isOptional %}guard let {{variable.name}}: {{ variable.typeName.unwrappedTypeName }} = aDecoder.decode(forKey: "{{variable.name}}") else { return nil }; self.{{variable.name}} = {{variable.name}}{% else %}self.{{variable.name}} = aDecoder.decode(forKey: "{{variable.name}}"){% endif %}{%endif%}
            {% endfor %}{% if type.supertype.implements.AutoDiffable %}super.init(coder: aDecoder){% endif %}
        }
 
        {% if type.supertype.implements.AutoDiffable %}override {% endif %}func encode(with aCoder: NSCoder) {
            {% if type.supertype.implements.AutoDiffable %}super.encode(with: aCoder){% endif %}
            {% for variable in type.storedVariables %}{% if not variable.annotations.skipEquality %}aCoder.encode(self.{{variable.name}}, forKey: "{{variable.name}}")
            {% endif %}{% endfor %}
        }
        // } {{ type.name }}.NSCoding
}
*/
    {% endfor %}
