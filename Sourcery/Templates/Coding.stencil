import Foundation


extension NSCoder {

    @nonobjc func decode(forKey: String) -> Int {
        // swiftlint:disable force_cast
        return self.decodeInteger(forKey: forKey)
        // swiftlint:enable force_cast
    }

    @nonobjc func decode(forKey: String) -> String {
        // swiftlint:disable force_cast
        return (self.decode(forKey: forKey) as String?)!
        // swiftlint:enable force_cast
    }

    @nonobjc func decode(forKey: String) -> Bool {
        // swiftlint:disable force_cast
        return self.decodeBool(forKey: forKey)
        // swiftlint:enable force_cast
    }

    @nonobjc func decode(forKey: String) -> TypeName {
        return (self.decode(forKey: forKey) as TypeName?)!
    }

    @nonobjc func decode(forKey: String) -> AccessLevel {
        return (self.decode(forKey: forKey) as AccessLevel?)!
    }

    func decode<E, V>(forKey: String) -> [E: V] {
        // swiftlint:disable force_cast
        guard let object = self.decodeObject(forKey: forKey) else {
            return [:]
        }

        return object as! [E:V]
        // swiftlint:enable force_cast
    }

    func decode<E>(forKey: String) -> E? {
        // swiftlint:disable force_cast
        guard let object = self.decodeObject(forKey: forKey) else {
            return nil
        }

        return object as! E
        // swiftlint:enable force_cast
    }

    func decode<E>(forKey: String) -> [E] {
        // swiftlint:disable force_cast
        guard let object = self.decodeObject(forKey: forKey) else {
            return []
        }

        return object as? [E]
        // swiftlint:enable force_cast
    }
}

{% for type in types.implementing.AutoDiffable %}
/*
extension {{ type.name }}{% if not type.supertype.implements.AutoDiffable %}: NSCoding{% endif %} {
    required init?(coder aDecoder: NSCoder) {

        {% for parameter in type.storedVariables %}{% if parameter.typeName == "Bool" %}self.{{parameter.name}} = aDecoder.decodeBool(forKey: "{{parameter.name}}"){% else %} {% if parameter.typeName == "Int" %}self.{{parameter.name}} = aDecoder.decodeInt(forKey: "{{parameter.name}}"){% else %}self.{{parameter.name}} = aDecoder.decode(forKey: "{{parameter.name}}"){% endif %}{% endif %}
        {% endfor %}
        {% if type.supertype.implements.AutoDiffable %}super.init(coder: aDecoder){% endif %}
    }
 
    {% if type.supertype.implements.AutoDiffable %}override {% endif %}func encode(with aCoder: NSCoder) {
        {% if type.supertype.implements.AutoDiffable %}super.encode(with: aCoder){% endif %}
        {% for parameter in type.storedVariables %}aCoder.encode(self.{{parameter.name}}, forKey: "{{parameter.name}}")
        {% endfor %}
    }
}
*/
    {% endfor %}
